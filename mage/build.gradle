import org.ajoberstar.grgit.Grgit

plugins {
    id 'net.linguica.maven-settings' version '0.5'
    id 'org.ajoberstar.grgit' version '1.6.0'
}
apply plugin: 'com.android.application'
apply plugin: 'maven-publish'

group 'mil.nga.giat.mage'
archivesBaseName = 'mage-android'
version '6.1.3'
ext {
    versionCode = 56
    sourceRefspec = Grgit.open().head().id
}

def serverURL = hasProperty('SERVER_URL') ? SERVER_URL : ''
def googleMapsApiReleaseKey = hasProperty('RELEASE_MAPS_API_KEY') ? RELEASE_MAPS_API_KEY : ''
def googleMapsApiDebugKey = hasProperty('DEBUG_MAPS_API_KEY') ? DEBUG_MAPS_API_KEY : ''
def signedApkPath = hasProperty('SIGNED_APK_PATH') ? SIGNED_APK_PATH : "${project.buildDir}/outputs/apk/${archivesBaseName}-defaults-release.apk"
def signedDebugApkPath = hasProperty('SIGNED_DEBUG_APK_PATH') ? SIGNED_DEBUG_APK_PATH : "${project.buildDir}/outputs/apk/${archivesBaseName}-defaults-debug.apk"

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.3"

    dexOptions {
        javaMaxHeapSize "4g"
    }

    sourceSets {
        androidTest.setRoot('tests')
        androidTest.java.srcDirs = ['tests/src']
    }

    defaultConfig {
        applicationId "mil.nga.giat.mage"
        versionName project.version
        versionCode project.versionCode as int
        minSdkVersion 17
        targetSdkVersion 25
        multiDexEnabled true
        resValue "string", "serverURLDefaultValue", serverURL
        resValue "string", "recentMapXYZDefaultValue", "263.0,40.0,3"
        resValue "bool", "isWearBuildDefaultValue", "false"
        resValue "string", "source_refspec", project.sourceRefspec
        resValue "string", "applicationId", applicationId
        manifestPlaceholders source_refspec: project.sourceRefspec
        buildConfigField "String", "SOURCE_REFSPEC", $/"${project.sourceRefspec}"/$
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.txt"
            resValue "string", "GOOGLE_MAPS_ANDROID_API_KEY", googleMapsApiReleaseKey
        }
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            minifyEnabled false
            resValue "string", "GOOGLE_MAPS_ANDROID_API_KEY", googleMapsApiDebugKey
            resValue "string", "applicationId", defaultConfig.applicationId + applicationIdSuffix
        }
    }

    productFlavors {
        defaults {
            // if you build without a flavor gradle will build all flavors
            // define this flavor to provide a flavor we can build with no overrides
        }
        wear {
            resValue "bool", "isWearBuildDefaultValue", "true"
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/INDEX.LIST'
    }
}

def configurePom(pom) {
    pom.withXml {
        // for dependencies and exclusions
        def dependenciesNode = asNode().appendNode('dependencies')
        project.configurations.compile.allDependencies.each { Dependency dep ->
            if (dep instanceof SelfResolvingDependency) {
                // apparently the files() dependency results in a SelfResolvingDependency - skip it
                return;
            }

            def dependencyNode = dependenciesNode.appendNode('dependency')
            dependencyNode.appendNode('groupId', dep.group)
            dependencyNode.appendNode('artifactId', dep.name)
            dependencyNode.appendNode('version', dep.version)

            // for exclusions
            if (dep.excludeRules.size() > 0) {
                def exclusions = dependencyNode.appendNode('exclusions')
                dep.excludeRules.each { ExcludeRule ex ->
                    def exclusion = exclusions.appendNode('exclusion')
                    exclusion.appendNode('groupId', ex.group)
                    exclusion.appendNode('artifactId', ex.module)
                }
            }
        }
    }
}

publishing {
    publications {
        defaultsApk(MavenPublication) {
            artifactId archivesBaseName
            pom.packaging 'apk'
            configurePom(pom)
            artifact "${project.buildDir}/outputs/apk/${archivesBaseName}-defaults-release-unsigned.apk", {
                classifier 'unsigned'
            }
            if (file(signedApkPath).exists()) {
                artifact signedApkPath
            }
            if (file(signedDebugApkPath).exists()) {
                artifact signedDebugApkPath, {
                    classifier 'debug'
                }
            }
            if (project.hasProperty('SKIP_DEBUG_SIGNING')) {
                artifact "${project.buildDir}/outputs/apk/${archivesBaseName}-defaults-debug-unsigned.apk", {
                    classifier 'debug-unsigned'
                }
            }
        }
    }
}

repositories {
    def buildRepo = maven {
        name 'build'
        url project.properties['repositories.build.url'] ?: "${buildDir}/m2"
    }
    publishing.repositories.add buildRepo

    if (project.hasProperty('repositories.shared.name')) {
        def sharedRepo = maven {
            name project.properties['repositories.shared.name']
            url project.properties['repositories.shared.url']
        }
        publishing.repositories.add sharedRepo
    }
}

dependencies {
    ext {
        support_library_version = '25.3.1'
        google_play_services_version = '10.2.1'
    }

    // this block allows the mage-android-wear-bridge to be pulled in dynamically when that flavor is built
    gradle.startParameter.taskRequests.each { taskRequest ->
        taskRequest.args.each { taskName ->
            if (taskName.toLowerCase().contains("wear")) {
                //wearCompile project(':bridge') // uncomment me to build wearable locally
                wearCompile "mil.nga.giat.mage.wearable:bridge:1.0.0" // uncomment me to build wearable.  comment me if building wearable locally.
            }
        }
    }

    compile 'com.android.support:multidex:1.0.1'
    compile 'com.android.support.constraint:constraint-layout:1.1.3'
    compile "com.android.support:support-v13:$support_library_version"
    compile "com.android.support:animated-vector-drawable:$support_library_version"
    compile "com.android.support:mediarouter-v7:$support_library_version"
    compile "com.android.support:recyclerview-v7:$support_library_version"
    compile "com.android.support:appcompat-v7:$support_library_version"
    compile "com.android.support:design:$support_library_version"
    compile "com.android.support:cardview-v7:$support_library_version"
    compile "com.android.support:preference-v7:$support_library_version"
    compile "com.android.support:preference-v14:$support_library_version"
    compile "com.google.android.gms:play-services-maps:$google_play_services_version"

    //    compile project(':sdk') // uncomment me to build locally, and see top-level build.gradle
    compile 'mil.nga.giat.mage:mage-android-sdk:6.2.0' // comment me to build locally
    compile 'com.google.maps.android:android-maps-utils:0.5'
    compile 'mil.nga.geopackage.map:geopackage-android-map:1.4.1'
    compile 'org.ocpsoft.prettytime:prettytime:3.2.5.Final'
    compile 'com.github.bumptech.glide:glide:3.8.0'
    compile 'com.github.bumptech.glide:okhttp-integration:1.3.1@aar'
    compile 'com.google.android:flexbox:0.3.2'
    compile 'com.nulab-inc:zxcvbn:1.2.3'
    compile (name:'mgrs-0.0.2-release', ext:'aar')
    compile files('libs/GeocoderPlus.jar')
}

task androidArtifactVersion {
    group = 'android'
    description = 'Print the application ID, version code, and version name this build will produce in AndroidManifest.xml'
    doLast {
        com.android.build.gradle.AppExtension appExt = project.extensions.android;
        println "applicationId: ${appExt.defaultConfig.applicationId}"
        println "versionCode: ${appExt.defaultConfig.versionCode}"
        println "versionName: ${appExt.defaultConfig.versionName}"
    }
}

configure extensions.android, {
    if (project.hasProperty('RELEASE_STORE_FILE') && file(project.getProperty('RELEASE_STORE_FILE')).exists()) {
        signingConfigs {
            release {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
        buildTypes {
            release {
                signingConfig signingConfigs.release
            }
        }
    }
    else {
        println 'no release keystore configured'
    }

    if (project.hasProperty('SKIP_DEBUG_SIGNING')) {
        buildTypes {
            debug {
                signingConfig null
            }
        }
    }
    else if (project.hasProperty('DEBUG_STORE_FILE') && file(project.getProperty('DEBUG_STORE_FILE')).exists()) {
        signingConfigs {
            debug {
                storeFile file(DEBUG_STORE_FILE)
                storePassword DEBUG_STORE_PASSWORD
                keyAlias DEBUG_KEY_ALIAS
                keyPassword DEBUG_KEY_PASSWORD
            }
        }
    }
}
