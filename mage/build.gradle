import org.ajoberstar.grgit.Grgit

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
    id 'maven-publish'
    id 'org.ajoberstar.grgit' version '4.1.0'
    id 'dagger.hilt.android.plugin'
}

group 'mil.nga.giat.mage'
version '7.0.2'
ext {
    sourceRefspec = Grgit.open(currentDir: project.rootDir).head().id

    //Test resources
    buildToolsVersion = "28.0.3"
    androidxLibVersion = "1.0.0"
    extTruthVersion = '1.2.0'
    coreVersion = "1.2.0"
    extJUnitVersion = "1.1.1"
    runnerVersion = "1.2.0"
    espressoVersion = "3.2.0"
}

kapt {
    correctErrorTypes true
}

def serverURL = hasProperty('SERVER_URL') ? SERVER_URL : ''
def googleMapsApiReleaseKey = hasProperty('RELEASE_MAPS_API_KEY') ? RELEASE_MAPS_API_KEY : ''
def googleMapsApiDebugKey = hasProperty('DEBUG_MAPS_API_KEY') ? DEBUG_MAPS_API_KEY : ''

android {
    compileSdkVersion 31
    flavorDimensions "default"

    dataBinding {
        enabled = true
    }

    dexOptions {
        javaMaxHeapSize "6g"
    }

    sourceSets {
        androidTest.setRoot('tests')
        androidTest.java.srcDirs = ['tests/src']
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerVersion = "1.4.32"
        kotlinCompilerExtensionVersion = "1.0.0"
    }

    defaultConfig {
        applicationId "mil.nga.giat.mage"
        versionName project.version
        versionCode VERSION_CODE as int
        minSdkVersion 22
        targetSdkVersion 30
        multiDexEnabled true
        resValue "string", "serverURLDefaultValue", serverURL
        resValue "string", "recentMapXYZDefaultValue", "263.0,40.0,3"
        resValue "bool", "isWearBuildDefaultValue", "false"
        resValue "string", "source_refspec", project.sourceRefspec
        resValue "string", "applicationId", applicationId
        manifestPlaceholders source_refspec: project.sourceRefspec
        buildConfigField "String", "SOURCE_REFSPEC", $/"${project.sourceRefspec}"/$

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    kapt {
        arguments {
            arg("room.schemaLocation", "$projectDir/schemas".toString())
        }
    }

    signingConfigs {
        release {
            if (project.hasProperty('KEYSTORE')) {
                storeFile file(KEYSTORE)
                storePassword KEYSTORE_PASSWORD
                keyAlias KEY_ALIAS
                keyPassword KEY_PASSWORD
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.txt"
            resValue "string", "GOOGLE_MAPS_ANDROID_API_KEY", googleMapsApiReleaseKey
        }

        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            minifyEnabled false
            resValue "string", "GOOGLE_MAPS_ANDROID_API_KEY", googleMapsApiDebugKey
            resValue "string", "applicationId", defaultConfig.applicationId + applicationIdSuffix
        }
    }

    productFlavors {
        defaults {
            // if you build without a flavor gradle will build all flavors
            // define this flavor to provide a flavor we can build with no overrides
        }
        wear {
            resValue "bool", "isWearBuildDefaultValue", "true"
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/INDEX.LIST'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            animationsDisabled = true
        }
    }

    useLibrary 'android.test.runner'
    useLibrary 'android.test.base'
    useLibrary 'android.test.mock'
}

dependencies {
    ext {
        google_play_services_version = '17.0.1'
        lifecycle_version= '2.2.0'
        work_version = '1.0.0'
        room_version = '2.3.0'
        paging_version = '3.0.1'
    }

    // this block allows the mage-android-wear-bridge to be pulled in dynamically when that flavor is built
    gradle.startParameter.taskRequests.each { taskRequest ->
        taskRequest.args.each { taskName ->
            if (taskName.toLowerCase().contains("wear")) {
                //wearCompile project(':bridge') // uncomment me to build wearable locally
                wearCompile "mil.nga.giat.mage.wearable:bridge:1.0.0" // uncomment me to build wearable.  comment me if building wearable locally.
            }
        }
    }

    api 'androidx.constraintlayout:constraintlayout:2.0.1'
    api 'androidx.vectordrawable:vectordrawable-animated:1.1.0'
    api 'androidx.mediarouter:mediarouter:1.1.0'
    api 'androidx.recyclerview:recyclerview:1.1.0'
    api 'androidx.appcompat:appcompat:1.3.0-rc01'
    api 'com.google.android.material:material:1.0.0'
    api 'androidx.cardview:cardview:1.0.0'
    api 'androidx.preference:preference-ktx:1.1.1'
    api 'androidx.preference:preference-ktx:1.1.1'
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "com.google.android.gms:play-services-maps:$google_play_services_version"
    implementation 'com.google.maps.android:maps-ktx:2.4.0'

    implementation ('androidx.browser:browser:1.3.0') {
        exclude group: 'com.google.guava', module: 'listenablefuture'
    }

    implementation 'com.google.dagger:hilt-android:2.38.1'
    kapt 'com.google.dagger:hilt-compiler:2.38.1'

    implementation ('androidx.work:work-runtime-ktx:2.5.0') {
        exclude group: 'com.google.guava', module: 'listenablefuture'
    }

    implementation 'androidx.compose.ui:ui:1.0.3'
    implementation 'androidx.compose.ui:ui-tooling:1.0.3'
    implementation 'androidx.compose.foundation:foundation:1.0.3'
    implementation 'androidx.compose.runtime:runtime-livedata:1.0.3'
    implementation 'androidx.compose.runtime:runtime-rxjava2:1.0.3'
    implementation 'androidx.compose.material:material:1.0.3'
    implementation 'androidx.compose.material:material-icons-core:1.0.3'
    implementation 'androidx.compose.material:material-icons-extended:1.0.3'
    implementation 'androidx.activity:activity-compose:1.3.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:1.0.0-alpha07'
    implementation "com.google.accompanist:accompanist-swiperefresh:0.19.0"

    implementation("androidx.paging:paging-runtime-ktx:$paging_version")
    implementation("androidx.paging:paging-compose:1.0.0-alpha13")

//        api project(':sdk') // uncomment me to build locally, and see top-level build.gradle
    api 'mil.nga.giat.mage:mage-android-sdk:6.4.1' // comment me to build locally
    api 'com.google.maps.android:android-maps-utils:0.6.2'
    api 'mil.nga.geopackage.map:geopackage-android-map:3.4.0'
    api 'org.ocpsoft.prettytime:prettytime:3.2.5.Final'

    implementation 'com.github.bumptech.glide:glide:4.12.0'
    implementation 'com.github.bumptech.glide:okhttp3-integration:4.12.0'
    implementation "com.google.accompanist:accompanist-glide:0.15.0"
    kapt 'com.github.bumptech.glide:compiler:4.12.0'

    api 'com.google.android:flexbox:2.0.1'
    api 'com.nulab-inc:zxcvbn:1.2.3'
    api (name:'mgrs-0.0.2-release', ext:'aar')

    api "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    api "androidx.room:room-ktx:$room_version"

    implementation "androidx.core:core-ktx:1.3.2"
//    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.4.30"

    implementation 'com.mapbox.mapboxsdk:mapbox-sdk-geojson:4.6.0'

    // Testing-only dependencies
//    androidTestImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.4.30"
    androidTestImplementation 'androidx.test:core:' +coreVersion
    androidTestImplementation 'androidx.test:core-ktx:' + coreVersion
    androidTestImplementation 'androidx.test.ext:junit:' + extJUnitVersion
    androidTestImplementation 'androidx.test.ext:junit-ktx:' + extJUnitVersion
    androidTestImplementation 'androidx.test:runner:' + runnerVersion
    androidTestImplementation 'androidx.test:rules:' + runnerVersion
    androidTestImplementation 'androidx.test.espresso:espresso-core:' +espressoVersion
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:' + espressoVersion
}

task sdkVersion {
    group = 'android'
    description = 'Print the MAGE SDK version'
    println configurations.api.allDependencies.find { it.name == 'mage-android-sdk'}.version
}

task androidArtifactVersion {
    group = 'android'
    description = 'Print the context ID, version code, and version name this build will produce in AndroidManifest.xml'
    doLast {
        appExt = project.extensions.android
        println "applicationId: ${appExt.defaultConfig.applicationId}"
        println "versionCode: ${appExt.defaultConfig.versionCode}"
        println "versionName: ${appExt.defaultConfig.versionName}"
    }
}
